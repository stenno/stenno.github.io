{"version":3,"file":"0.js","mappings":";;;;;AAAA,+BAA+B;AAC/B;AACA;AACA,YAAY,6BAA6B;AACzC;;AAEA;AACA;AACA;AACA,UAAU,2BAA2B;AACrC;AACA;AACA;AACA;AACA,YAAY,8BAA8B;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA,4BAA4B;AAC5B","sources":["webpack://my-webpack-project/./src/workers/parseTTY.js"],"sourcesContent":["const TTYREC_HEADER_SIZE = 12; // bytes, 3 x Uint32\nconst parseHeader = (buffer) => {\n  const [timestamp, usec, byteLength] = new Uint32Array(buffer);\n  return ({ timestamp, usec, byteLength });\n};\n\n/* eslint-disable-next-line no-restricted-globals */\nself.onmessage = (e) => {\n  const buffer = e.data();\n  const { byteLength: bufferLength } = buffer;\n  let offset = 0;\n  const decoder = new TextDecoder();\n  while (offset < bufferLength) {\n    const payloadOffset = offset + TTYREC_HEADER_SIZE;\n    const { timestamp, usec, byteLength } = parseHeader(buffer.slice(offset, payloadOffset));\n    const payloadBuffer = buffer.slice(payloadOffset, payloadOffset + byteLength);\n    const payload = decoder.decode(new Uint8Array(payloadBuffer));\n    const toMillisec = timestamp * 1e3 + Math.floor(usec / 1e3);\n    const frame = {\n      timestamp: toMillisec,\n      payload,\n    };\n    self.postMessage(frame); /* eslint-disable-line no-restricted-globals */\n    offset += TTYREC_HEADER_SIZE + byteLength;\n  }\n  self.postMessage('done'); /* eslint-disable-line no-restricted-globals */\n};\n"],"names":[],"sourceRoot":""}